name: PMS Backend API Pipeline
on:
  push:
    branches:
      - ci/pipeline
    paths:
      - 'backend-ms1/**'
      - '.github/workflows/*-backend.yml' 
  workflow_dispatch: {}

jobs:
  test: 
    name: Compile and Unit Test
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: backend-ms1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'
      - name: Make mvnw executable 
        run: chmod +x ./mvnw
        
      - name: Run Unit Tests (includes compile)
        run: ./mvnw clean verify 

  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test] 
    defaults:
      run:
        working-directory: backend-ms1
    outputs:
        IMAGE_VERSION: ${{ steps.extract_version.outputs.VERSION }}  
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK 17 (if Dockerfile does not build from source)
        if: ${{ false }} 
                        
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'
      - name: Make mvnw executable 
        run: chmod +x ./mvnw
      - name: Extract project version
        id: extract_version
        run: |
          VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          if [ -z "$VERSION" ] || [ "$VERSION" == "null" ]; then
            echo "Error: Could not extract version from pom.xml"
            exit 1
          fi
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: backend-ms1 
          file: backend-ms1/Dockerfile 
          push: true
          platforms: linux/amd64
          tags: | 
            ${{ secrets.DOCKERHUB_USERNAME }}/pms-api:${{ steps.extract_version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pms-api:latest
          build-args: |
            PROFILE=dev # Example build arg, ensure your Dockerfile uses it
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-kvm:
    name: Deploy to KVM Server
    needs: [build-and-push-image] 
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/ci/pipeline' 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.KVM_SSH_PRIVATE_KEY }}

      - name: Prepare deployment directory and copy files
        run: |
          ssh-keyscan -H ${{ secrets.KVM_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }} "mkdir -p /opt/pms-app/logstash/pipeline"
          
          scp ../backend-ms1/docker-compose.kvm.yml ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }}:/opt/pms-app/docker-compose.yml


          # Copiez les configurations nécessaires
          scp ../backend-ms1/prometheus.yml ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }}:/opt/pms-app/prometheus.yml
          scp -r ../backend-ms1/logstash/pipeline/* ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }}:/opt/pms-app/logstash/pipeline/

      - name: Deploy application on KVM
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          ssh ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }} << EOF
            cd /opt/pms-app
            
            # Optionnel: Login to Docker Hub si vos images sont privées (le serveur doit le faire une fois ou à chaque fois)
            # Si vos images sont publiques, ce n'est pas nécessaire.
            # Si elles sont privées, vous pouvez configurer Docker sur le serveur pour qu'il se souvienne des identifiants
            # ou passer le token ici (moins sécurisé pour le token).
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            echo "Pulling latest images..."
            docker-compose pull pharmacy-backend # Pull seulement l'image qui vient d'être mise à jour

            echo "Starting application with docker-compose..."
            docker-compose up -d --remove-orphans pharmacy-backend # Redémarre seulement le backend

            
            docker-compose pull 
            docker-compose up -d --remove-orphans

            echo "Cleaning up old Docker images..."
            docker image prune -af
          EOF
      - name: Logout from KVM server (cleanup ssh agent)
        if: always()
        run: ssh-add -D  