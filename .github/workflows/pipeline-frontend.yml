name: PMS Frontend Pipeline

on:
  push:
    branches:
      - ci/pipeline
    paths:
      - 'Frontend/**'       
      - '.github/workflows/*-frontend.yml'
  workflow_dispatch: {} 

jobs:
  build-and-push-image: 
    name: Build and Push FE Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read  
      packages: write 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up QEMU 
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx 
        uses: docker/setup-buildx-action@v3

      - name: Extract project version
        id: extract_version
        working-directory: Frontend/frontend 
        run: |
          VERSION=$(jq -r '.version' package.json)
          if [ -z "$VERSION" ] || [ "$VERSION" == "null" ]; then
            echo "Error: Could not extract version from package.json"
            exit 1
          fi
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: Frontend/frontend 
          file: Frontend/frontend/Dockerfile
          push: true
          platforms: linux/amd64 
          tags: | 
            ${{ secrets.DOCKERHUB_USERNAME }}/pms-ui:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/pms-ui:${{ steps.extract_version.outputs.VERSION }}
          cache-from: type=gha 
          cache-to: type=gha,mode=max 


  deploy-frontend-to-kvm:
    name: Deploy Frontend to KVM Server
    needs: [build-and-push-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/ci/pipeline'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.KVM_SSH_PRIVATE_KEY }}

      - name: Prepare deployment directory and copy configuration files
        run: |
          ssh-keyscan -H ${{ secrets.KVM_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }} "mkdir -p /opt/pms-app/logstash/pipeline"
          
          echo "Copying configuration files to KVM server..."
          # Utilise les chemins depuis la racine du checkout
          scp ./backend-ms1/docker-compose.kvm.yml ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }}:/opt/pms-app/docker-compose.yml
          scp ./backend-ms1/prometheus.yml ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }}:/opt/pms-app/prometheus.yml
          scp -r ./backend-ms1/logstash/pipeline/* ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }}:/opt/pms-app/logstash/pipeline/

      - name: Deploy application on KVM 
        run: |
          ssh ${{ secrets.KVM_USER }}@${{ secrets.KVM_HOST }} << EOF
            cd /opt/pms-app
            
            echo "Pulling latest frontend image..."
            docker-compose -f docker-compose.yml pull pharmacy-frontend

            echo "Restarting frontend service..."
            docker-compose -f docker-compose.yml up -d --remove-orphans pharmacy-frontend

            echo "Cleaning up old Docker images..."
            docker image prune -af
          EOF
      - name: Logout from KVM server (cleanup ssh agent)
        if: always()
        run: ssh-add -D